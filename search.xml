<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式之：工厂方法模式</title>
      <link href="/2019/10/20/she-ji-mo-shi-zhi-gong-han-fang-fa-mo-shi/"/>
      <url>/2019/10/20/she-ji-mo-shi-zhi-gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><blockquote><p>CSCI 3132课程中的定义：Pull the code that builds the instances out and put it into a separate  class.(将创建实例对象的代码移植到一个类中)</p></blockquote><blockquote><p>《设计模式之禅》中的定义：Define an interface for creating an object,but let subclasses decide which class to instantiate.Factory Method lets a class defer instantiation to subclasses.(定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类)</p></blockquote><p>嗯，总的来说就是要我们不要直接用new来创建对象，通过一个类来统一获取和管理对象。定义总是说的文绉绉的，下面就用例子来具体体验一下啥是工厂模式。</p><h3 id="2-举个例子"><a href="#2-举个例子" class="headerlink" title="2 举个例子"></a>2 举个例子</h3><p>背景：这个背景很简单，有一个老板，这个老板有一家汽车工厂专门生产汽车。<br>也就是我们需要定义一家工厂用于生产汽车，而汽车是有多种类型的，例如SUV、MPV等等，所以汽车是我们的一个产品类，先画出类图如下。</p><h4 id="2-1-通用类图"><a href="#2-1-通用类图" class="headerlink" title="2.1 通用类图"></a>2.1 通用类图</h4><p><img src="/images/Factory_universally.png" alt="工厂方法模式通用类图"></p><h4 id="2-2-例子类图"><a href="#2-2-例子类图" class="headerlink" title="2.2 例子类图"></a>2.2 例子类图</h4><p><img src="/images/Factory_instantiate.jpg" alt="工厂造车类图"></p><h4 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h4><p>先来看看产品(车)是怎样实现的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每一辆车都有不同的类型</span><span class="token keyword">void</span> <span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>MPV实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MPVCar</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一辆MPV......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SUV实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SUVCar</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">,</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一辆SUV......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象车类工厂</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractCarFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token operator">&lt;</span>T extents Car<span class="token operator">></span> T <span class="token function">createCar</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>工厂的实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactory</span> extents AbstractCarFactory<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token operator">&lt;</span>T extents Car<span class="token operator">></span> T <span class="token function">createCar</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>           Car car <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//利用反射创建实例对象</span>              car <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"亲，我们暂时无法生产该种汽车呢......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> car<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>利用高层模块调用，也就是老板下达命令要工厂生产哪一种汽车你就得给我生产哪一种汽车。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//先声明一间我自己的工厂</span>      AbstractCarFactory carFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//先给我生产一批MPV</span>      Car car <span class="token operator">=</span> carFactory<span class="token punctuation">.</span><span class="token function">createCar</span><span class="token punctuation">(</span>MPVCar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      car<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//再来一批SUV玩玩</span>      car <span class="token operator">=</span> carFactory<span class="token punctuation">.</span><span class="token function">createCar</span><span class="token punctuation">(</span>SUVCar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      car<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h3><h4 id="3-1-工厂方法模式的优点"><a href="#3-1-工厂方法模式的优点" class="headerlink" title="3.1 工厂方法模式的优点"></a>3.1 工厂方法模式的优点</h4><ul><li><p>良好的封装性和扩展性，最重要是符合开闭原则</p><p>想想看，假如我以后的能生产的汽车类型增加了轿车、面包车呢？我只需要在再实现类型的类就可以了，甚至都不用改工厂类，当我可能会生产货车这些呢？那我也可以再实现一个生产货车的工厂啊，只需要继承抽象工厂就可以了。符合开闭原则的对扩展开放，扩展性非常优秀。</p></li><li><p>屏蔽了产品类</p><p>通过工厂方法来为我们创建对象，实际上我们并不需要该产品是如何生产出来的，我只需要知道我要的这个对象得名字或者id(参考Spring框架的BeanFactory)就可以了，至于你是怎样给我创建的，怎样生成的实例，我毫不关心。例子中我们的生成的对象十分简单，直接new和用工厂好似没什么区别。可是在项目中我们的业务对象生成可能十分繁琐，例如要创建对象A之前可能需要先创建对象B，创建对象B需要组装字段等等。难道你每创建一次A都要做一次这么繁琐的工作吗？不仅大大降低了开发效率，还会破坏代码结构，扩展性十分的差。</p></li></ul><p> 写在最后：当我要做酱肘子的时候，难不成我还要养一头猪吗，直接去菜市场买一个它不香吗！！！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
